@* Directive statement Import *@
@using Microsoft.JSInterop
@using ExpenseVoid.Models
@using ExpenseVoid.Services
@using ExpenseVoid.Interface
@using ExpenseVoid.Helper
@using ExpenseVoid.Persistence

@* Dependency Injection *@
@inject IJSRuntime JSRuntime
@inject ITag tagService
@inject EmailToUserMap EmailToUserMap
@inject PreferencesStoreClone Storage
@page "/Tags"

@* CSS link *@
<link rel="stylesheet" href="css/sidebar.css" />
<link rel="stylesheet" href="css/Vanta.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


@* JavaScript Imports *@
<script src="js/sidebar.js"></script>
<script src="js/Vanta.js"></script>
<script src="https://cdn.tailwindcss.com"></script>

<h3>Tags</h3>

<body class="bg-gray-900 text-white">
    <div id="vanta-bg" class="flex flex-col md:flex-row gap-4 p-4">
        <!-- Sidebar / Navigation Menu -->
        <div>
            <NavMenu />
        </div>
        <div>
            <div class="bg-gray-800 p-4 rounded shadow-lg max-w-lg">
                <EditForm Model="@newTag" OnValidSubmit="HandleAddTag">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- User -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">User</label>
                        <p class="text-gray-300">@currentUser?.UserName</p>
                    </div>

                    <!-- Tag Name -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Tag Name</label>
                        <InputText @bind-Value="newTag.TagName" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <!-- Tag Color -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Tag Color</label>
                        <div class="flex items-center gap-2">
                            <InputText @bind-Value="newTag.TagColor" placeholder="#FF5733" class="w-full p-2 rounded bg-gray-700" />
                            <input type="color" @bind="newTag.TagColor" class="w-10 h-10 p-0 rounded-full border-none" />
                        </div>
                        <small class="text-gray-400">Enter a valid color code (e.g., #FF5733).</small>
                    </div>

                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Tag</button>
                </EditForm>

                @if (isSuccess)
                {
                    <p class="text-green-500 mt-4">Tag added successfully!</p>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-red-500 mt-4">@errorMessage</p>
                }
            </div>
        </div>
    </div>
</body>


@code {
    private Tag newTag = new();
    private string selectedTransactionType;
    private bool isSuccess = false;
    private string errorMessage = "";
    private bool vantaInitialized;
    private User? currentUser;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !vantaInitialized)
        {
            try
            {
                vantaInitialized = true;


                currentUser = await EmailToUserMap.GetUserByEmailAsync(Storage);
                if (currentUser != null)
                {
                    newTag.User = currentUser; // Assign the user to the new tag
                }

                // Ensure scripts are loaded
                await JSRuntime.InvokeVoidAsync("loadVantaScripts");

                // Initialize Vanta.js
                await JSRuntime.InvokeVoidAsync("initializeVanta");
                await JSRuntime.InvokeVoidAsync("initializeCharts");

                // await JSRuntime.InvokeVoidAsync("loadSidebarJS");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Vanta.js: {ex.Message}");
            }
        }
    }
    private async Task HandleAddTag()
    {
        try
        {

            // Save the new tag using the service
            await tagService.SaveTagAsync(newTag);

            // Show success message and reset the form
            isSuccess = true;
            errorMessage = "";
            newTag = new Tag();
            selectedTransactionType = "";
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"Error adding tag: {ex.Message}";
        }
    }
}
