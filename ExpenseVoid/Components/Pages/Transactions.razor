@* Directive statement Import *@
@using Microsoft.JSInterop
@using ExpenseVoid.Models
@using ExpenseVoid.Services
@using ExpenseVoid.Interface
@using ExpenseVoid.Helper
@using ExpenseVoid.Persistence

@* Dependency Injection *@
@inject IJSRuntime JSRuntime
@inject ITransaction transactionService
@inject IUser userService
@inject ITag tagService
@inject EmailToUserMap EmailToUserMap
@inject PreferencesStoreClone Storage
@inject NavigationManager Navigation
@page "/Transactions"

@* CSS link *@
<link rel="stylesheet" href="css/sidebar.css" />
<link rel="stylesheet" href="css/Vanta.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="css/ScrollTable.css" />

@* JavaScript Imports *@
<script src="js/sidebar.js"></script>
<script src="js/Vanta.js"></script>
<script src="https://cdn.tailwindcss.com"></script>
<h3>Transactions</h3>

<body class="bg-gray-900 text-white">
    <div id="vanta-bg" class="flex flex-col md:flex-row gap-4 p-4">
        <!-- Sidebar / Navigation Menu -->
        <div>
            <div><NavMenu /></div>
            <div>
                <div>
                    <div class="flex justify-between items-center mb-4">
                        <div class="card p-6">
                            <h2 class="text-sm font-medium mb-1">
                                <i class="fas fa-fire-flame-curved text-orange-500 mr-2"></i>Balance
                            </h2>
                            <div class="text-2xl font-semibold calories-value">@currentUser?.Balance</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="flex flex-col gap-4">
            <!-- Filter & Table Section -->
            <div class="semi-transparent p-4 rounded-lg shadow-lg">
                <!-- Filters -->
                <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Search Transaction Name</label>
                        <input type="text" @bind="searchTerm" class="w-full p-2 rounded bg-gray-700" placeholder="Enter transaction name..." />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Sort by Amount</label>
                        <select @bind="amountSort" class="w-full p-2 rounded bg-gray-700">
                            <option value="">Select...</option>
                            <option value="highest">Highest</option>
                            <option value="lowest">Lowest</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Filter by Date</label>
                        <div class="flex gap-2">
                            <input type="date" @bind="startDate" class="w-1/2 p-2 rounded bg-gray-700" />
                            <input type="date" @bind="endDate" class="w-1/2 p-2 rounded bg-gray-700" />
                            <button type="button" class="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center" @onclick="ClearDateFilters">
                                <img src="https://static-00.iconduck.com/assets.00/filter-remove-icon-945x1024-a4srzflx.png" alt="Clear Filter" class="w-6 h-6" />
                            </button>
                        </div>
                    </div>


                </div>

                <!-- Filtered Transactions Table -->
                <div class="scrollable-container">
                    <table class="table-auto w-full text-left bg-gray-800 rounded-lg shadow-lg">
                        <thead>
                            <tr class="bg-gray-700 text-gray-300">
                                <th class="px-4 py-2">#</th>
                                <th class="px-4 py-2">Transaction Name</th>
                                <th class="px-4 py-2">Amount</th>
                                <th class="px-4 py-2">Type</th>
                                <th class="px-4 py-2">Tag</th>
                                <th class="px-4 py-2">Date</th>
                                <th class="px-4 py-2">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredTransactions.Any())
                            {
                                @foreach (var transaction in filteredTransactions.Select((t, index) => new { Transaction = t, Index = index + 1 }))
                                {
                                    <tr class="border-b border-gray-700 hover:bg-gray-700">
                                        <td class="px-4 py-2">@transaction.Index</td>
                                        <td class="px-4 py-2" style="color: @transaction.Transaction.TransactionColor">@transaction.Transaction.TransactionName</td>
                                        <td class="px-4 py-2">@transaction.Transaction.TransactionAmount</td>
                                        <td class="px-4 py-2">
                                            @(transaction.Transaction.TransactionType?.Credit != null ? "Credit" : "Debit")
                                        </td>
                                        <td class="px-4 py-2">@transaction.Transaction.Tag?.TagName</td>
                                        <td class="px-4 py-2">@transaction.Transaction.TransactionDate?.ToString("yyyy-MM-dd")</td>
                                        <td class="px-4 py-2">

                                            <!-- Edit Debt Button -->
                                            <button class="bg-blue-500 text-white px-3 py-1 rounded-lg mr-2 hover:bg-blue-600"
                                                    title="Edit Debt"
                                                    @onclick="() => HandleEditTransaction(transaction.Transaction)">
                                                <i class="fas fa-edit"></i>
                                            </button>

                                            <!-- Remove Debt Button -->
                                            <button class="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600"
                                                    title="Remove Debt"
                                                    @onclick="() => HandleRemoveTransaction(transaction.Transaction)">
                                                <i class="fas fa-trash-alt"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td class="px-4 py-2 text-center text-gray-400" colspan="6">No transactions match the filters.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Form Section -->
            <div class="semi-transparent p-4 rounded-lg shadow-lg">
                <div class="p-4 rounded shadow-lg">
                    <EditForm Model="@transaction" OnValidSubmit="HandleTransactionSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-2">Transaction Name</label>
                                <InputText @bind-Value="transaction.TransactionName" class="w-full p-2 rounded bg-gray-700" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Transaction Type</label>
                                <InputSelect @bind-Value="transactionType" class="w-full p-2 rounded bg-gray-700">
                                    <option value="">Select Type</option>
                                    <option value="Credit">Credit</option>
                                    <option value="Debit">Debit</option>
                                </InputSelect>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Tag</label>
                                <InputSelect @bind-Value="selectedTagId" class="w-full p-2 rounded bg-gray-700">
                                    <option value="">Select a Tag</option>
                                    @foreach (var tag in tags)
                                    {
                                        <option value="@tag.TagId">@tag.TagName</option>
                                    }
                                </InputSelect>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Amount</label>
                                <InputNumber @bind-Value="transaction.TransactionAmount" class="w-full p-2 rounded bg-gray-700" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Remarks</label>
                                <InputTextArea @bind-Value="transaction.TransactionRemarks" class="w-full rounded bg-gray-700" />
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-2">Transaction Date</label>
                                <InputDate @bind-Value="transaction.TransactionDate" class="w-full p-2 rounded bg-gray-700" />
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium mb-2">Transaction Color</label>
                                <input type="color"
                                       @bind="transaction.TransactionColor"
                                       class="w-full p-2 rounded bg-gray-700"
                                       style="height: 40px;" />
                            </div>

                        </div>
                        <button type="submit" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded">Add Transaction</button>
                    </EditForm>


                    @if (isSuccess)
                    {
                        <p class="text-green-500 mt-4">Transaction added successfully!</p>
                    }
       
                </div>
            </div>
            
        </div>
    </div>
    @if (IsEditModalVisible)
    {
        <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
            <div class="bg-gray-800 rounded-lg shadow-lg p-6 w-1/2">
                <h2 class="text-xl font-bold text-gray-300 mb-4">Edit Transaction</h2>

                <EditForm Model="@SelectedTransaction" OnValidSubmit="SaveEditedDebt">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium mb-2">Transaction Name</label>
                            <InputText @bind-Value="SelectedTransaction.TransactionName" class="w-full p-2 rounded bg-gray-700" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2">Amount</label>
                            <InputNumber @bind-Value="SelectedTransaction.TransactionAmount" class="w-full p-2 rounded bg-gray-700" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2">Transaction Date</label>
                            <InputDate @bind-Value="SelectedTransaction.TransactionDate" class="w-full p-2 rounded bg-gray-700" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2">Tag</label>
                            <InputSelect @bind-Value="selectedTagId" class="w-full p-2 rounded bg-gray-700">
                                <option value="">Select a Tag</option>
                                @foreach (var tag in tags)
                                {
                                    <option value="@tag.TagId">@tag.TagName</option>
                                }
                            </InputSelect>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-2">Transaction Type</label>
                            <InputSelect @bind-Value="transactionType" class="w-full p-2 rounded bg-gray-700">
                                <option value="">Select Type</option>
                                <option value="Credit">Credit</option>
                                <option value="Debit">Debit</option>
                            </InputSelect>
                        </div>

                        <div>
                            <label class="block text-sm font-medium mb-2">Transaction Color</label>
                            <input type="color" @bind="SelectedTransaction.TransactionColor" class="w-full p-2 rounded bg-gray-700" style="height: 40px;" />
                        </div>
                    </div>

                    <div class="flex justify-end mt-4">
                        <button type="button" class="bg-red-500 text-white px-4 py-2 rounded-lg mr-2 hover:bg-red-600"
                                @onclick="() => IsEditModalVisible = false">
                            Cancel
                        </button>
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">
                            Save
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

</body>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <ToastALL ErrorMessageTransaction="@errorMessage"/>
}

@code {
    private bool vantaInitialized;
    private User? currentUser;
    private Transaction transaction = new Transaction
        {
            User = new User() // Ensure User is initialized
        };
    private List<Transaction> currentUserTransactions = new();
    private List<Tag> tags = new();
    private Guid selectedTagId;
    private string transactionType;
    private bool isSuccess = false;
    private string errorMessage;
    private Guid selectedUserId; // To track selected user
    private List<User> users = new List<User>(); // List of users
    private string searchTerm = string.Empty;
    private string amountSort = string.Empty;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private Transaction SelectedTransaction { get; set; }
    private bool IsEditModalVisible { get; set; }

    private IEnumerable<Transaction> filteredTransactions
    {
        get
        {
            var transactions = currentUserTransactions
                .Where(t => string.IsNullOrEmpty(searchTerm) ||
                            t.TransactionName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .Where(t => !startDate.HasValue || t.TransactionDate >= startDate)
                .Where(t => !endDate.HasValue || t.TransactionDate <= endDate);

            return amountSort switch
            {
                "highest" => transactions.OrderByDescending(t => t.TransactionAmount),
                "lowest" => transactions.OrderBy(t => t.TransactionAmount),
                _ => transactions
            };
        }
    }

    private void ClearDateFilters()
    {
        startDate = null;
        endDate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all users
            // users = await userService.LoadUsersAsync();
            currentUser = await EmailToUserMap.GetUserByEmailAsync(Storage);
            tags = await tagService.LoadTagsAsync();
            if (currentUser != null)
            {
                currentUserTransactions = await transactionService.GetTransactionsByUserIdAsync(currentUser.UserID);
            }
            else
            {
                errorMessage = "User not found.";
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load users: {ex.Message}";
        }
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !vantaInitialized)
        {
            try
            {
                vantaInitialized = true;



                // Ensure scripts are loaded
                await JSRuntime.InvokeVoidAsync("loadVantaScripts");

                // Initialize Vanta.js
                await JSRuntime.InvokeVoidAsync("initializeVanta");

                // await JSRuntime.InvokeVoidAsync("loadSidebarJS");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Vanta.js: {ex.Message}");
            }
        }
    }

    private async Task HandleRemoveTransaction(Transaction transaction)
    {
        try
        {
            await transactionService.RemoveTransactionAsync(transaction);
            await OnInitializedAsync();
            Console.WriteLine($"Transaction with ID {transaction.TransactionID} removed successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing Transaction: {ex.Message}");
        }
    }

    private async Task HandleTransactionSubmit()
    {
        try
        {
            // Use current user directly
            var user = currentUser;
            var tag = tags.FirstOrDefault(t => t.TagId.ToString() == selectedTagId.ToString());

            if (user == null)
            {
                throw new Exception("User not found");
            }

            transaction.User = user;
            transaction.Tag = tag;

            if(transaction.Tag == null)
            {
                errorMessage = "Tags are required to add Transaction!";
                return;
            }

            if (transaction.TransactionType == null)
            {
                transaction.TransactionType = new TransactionType();
            }

            // Map transaction type
            if (transactionType == "Credit")
            {
                transaction.TransactionType.Credit = transaction.TransactionAmount;
            }
            else if (transactionType == "Debit")
            {
                transaction.TransactionType.Debit = transaction.TransactionAmount;
            }

            // Process the transaction
            await transactionService.ProcessTransactionAsync(transaction);

            currentUserTransactions = await transactionService.GetTransactionsByUserIdAsync(currentUser.UserID);

            // Show success message
            isSuccess = true;
            errorMessage = null;

            // Reset form
            transaction = new Transaction
                {
                    User = new User(),
                    TransactionType = new TransactionType()
                };
            selectedTagId = Guid.Empty;
            transactionType = null;

            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to add transaction: {ex.Message}";
            isSuccess = false;
        }
    }
    //edit Transaction data
    private async Task HandleEditTransaction(Transaction transaction)
    {
        // Set the selected debt and show the edit modal
        SelectedTransaction = new Transaction
            {
                TransactionID = transaction.TransactionID,
                User = currentUser,
                Tag = transaction.Tag,
                TransactionAmount = transaction.TransactionAmount,
                TransactionName = transaction.TransactionName,
                TransactionType = transaction.TransactionType,
                TransactionDate = transaction.TransactionDate,
                TransactionColor = transaction.TransactionColor,
                
            };

        IsEditModalVisible = true;
    }

    private async Task SaveEditedDebt()
    {
        var selectedTag = tags.FirstOrDefault(s => s.TagId == selectedTagId);

        if (transactionType == "Credit")
        {
            SelectedTransaction.TransactionType = new TransactionType
                {
                    Credit = SelectedTransaction.TransactionAmount,
                    Debit = null
                };
        }
        else if (transactionType == "Debit")
        {
            SelectedTransaction.TransactionType = new TransactionType
                {
                    Debit = SelectedTransaction.TransactionAmount,
                    Credit = null
                };
        }

        if (selectedTag != null)
        {
            SelectedTransaction.Tag = selectedTag;

            // Save updated transaction
            await transactionService.EditTransactionAsync(SelectedTransaction);
            IsEditModalVisible = false;

            // Reload data or update the UI
            await OnInitializedAsync();
        }
        else
        {
            Console.WriteLine("Tag not found");
        }
    }


}