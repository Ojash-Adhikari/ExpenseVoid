@* Directive statement Import *@
@using Microsoft.JSInterop
@using ExpenseVoid.Models
@using ExpenseVoid.Services
@using ExpenseVoid.Interface

@* Dependency Injection *@
@inject IJSRuntime JSRuntime
@inject ITransaction transactionService
@inject IUser userService
@inject ITag tagService
@page "/Transactions"

@* CSS link *@
<link rel="stylesheet" href="css/sidebar.css" />
<link rel="stylesheet" href="css/Vanta.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


@* JavaScript Imports *@
<script src="js/sidebar.js"></script>
<script src="js/Vanta.js"></script>
<script src="https://cdn.tailwindcss.com"></script>
<h3>Transactions</h3>

<body class="bg-gray-900 text-white">
    <div id="vanta-bg" class="flex flex-col md:flex-row gap-4 p-4">
        <!-- Sidebar / Navigation Menu -->
        <div>
            <NavMenu />
        </div>
        <div>
            <div class="bg-gray-800 p-4 rounded shadow-lg max-w-lg">
                <EditForm Model="@transaction" OnValidSubmit="HandleTransactionSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- User Dropdown -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">User</label>
                        <InputSelect @bind-Value="selectedUserId" class="w-full p-2 rounded bg-gray-700">
                            <option value="">Select a User</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.UserID">@user.UserName</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Transaction Type -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Transaction Type</label>
                        <InputSelect @bind-Value="transactionType" class="w-full p-2 rounded bg-gray-700">
                            <option value="">Select Type</option>
                            <option value="Credit">Credit</option>
                            <option value="Debit">Debit</option>
                        </InputSelect>
                    </div>

                    <!-- Tag Dropdown -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Tag</label>
                        <InputSelect @bind-Value="selectedTagId" class="w-full p-2 rounded bg-gray-700">
                            <option value="">Select a Tag</option>
                            @foreach (var tag in tags)
                            {
                                <option value="@tag.TagId">@tag.TagName</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Amount -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Amount</label>
                        <InputNumber @bind-Value="transaction.TransactionAmount" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <!-- Remarks -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Remarks</label>
                        <InputTextArea @bind-Value="transaction.TransactionRemarks" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <!-- Transaction Date -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Transaction Date</label>
                        <InputDate @bind-Value="transaction.TransactionDate" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <!-- Transaction Color -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Transaction Color</label>
                        <InputText @bind-Value="transaction.TransactionColor" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Transaction</button>
                </EditForm>

                @if (isSuccess)
                {
                    <p class="text-green-500 mt-4">Transaction added successfully!</p>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-red-500 mt-4">@errorMessage</p>
                }
            </div>
        </div>

    </div>
</body>

@code {
    private bool vantaInitialized;
    private Transaction transaction = new Transaction
        {
            User = new User() // Ensure User is initialized
        };
    private List<Tag> tags = new();
    private Guid selectedTagId;
    private string transactionType;
    private bool isSuccess = false;
    private string errorMessage;
    private Guid selectedUserId; // To track selected user
    private List<User> users = new List<User>(); // List of users

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all users
            users = await userService.LoadUsersAsync();
            tags = await tagService.LoadTagsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load users: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !vantaInitialized)
        {
            try
            {
                vantaInitialized = true;



                // Ensure scripts are loaded
                await JSRuntime.InvokeVoidAsync("loadVantaScripts");

                // Initialize Vanta.js
                await JSRuntime.InvokeVoidAsync("initializeVanta");

                // await JSRuntime.InvokeVoidAsync("loadSidebarJS");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Vanta.js: {ex.Message}");
            }
        }
    }

    private async Task HandleTransactionSubmit()
    {
        try
        {
            // Set the selected user and tag
            var user = users.FirstOrDefault(u => u.UserID.ToString() == selectedUserId.ToString());
            var tag = tags.FirstOrDefault(t => t.TagId.ToString() == selectedTagId.ToString());

            if (user == null)
            {
                throw new Exception("User not found");
            }

            transaction.User = user;
            transaction.Tag = tag;

            if (transaction.TransactionType == null)
            {
                transaction.TransactionType = new TransactionType();
            }

            // Map transaction type
            if (transactionType == "Credit")
            {
                transaction.TransactionType.Credit = transaction.TransactionAmount;
                
            }
            else if (transactionType == "Debit")
            {
                transaction.TransactionType.Debit = transaction.TransactionAmount;
                
            }

            // Process the transaction
            await transactionService.ProcessTransactionAsync(transaction);

            // Show success message
            isSuccess = true;
            errorMessage = null;

            // Reset form
            transaction = new Transaction
                {
                    User = new User(),
                    TransactionType = new TransactionType()
                };
            selectedUserId = Guid.Empty;
            selectedTagId = Guid.Empty;
            transactionType = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to add transaction: {ex.Message}";
            isSuccess = false;
        }
    }
}