@page "/NewProfile"
@* Directive statement Import *@
@using Microsoft.JSInterop
@using ExpenseVoid.Models
@using ExpenseVoid.Services
@using ExpenseVoid.Interface
@using ExpenseVoid.Helper
@using ExpenseVoid.Persistence

@* Dependency Injection *@
@inject IJSRuntime JSRuntime
@inject IProfile profileService
@inject IUser userService
@inject IGroup groupService
@inject EmailToUserMap EmailToUserMap
@inject PreferencesStoreClone Storage



<link rel="stylesheet" href="css/sidebar.css" />
<link rel="stylesheet" href="css/Vanta.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<script src="js/sidebar.js"></script>
<script src="js/Vanta.js"></script>
<script src="https://cdn.tailwindcss.com"></script>

<h3>Add Profile</h3>

<body class="bg-gray-900 text-white">
    <div id="vanta-bg" class="flex flex-col md:flex-row gap-4 p-4">
        <div>
            <NavMenu />
        </div>
        <div>
            <div class="bg-gray-800 p-4 rounded shadow-lg max-w-lg">
                <EditForm Model="@newProfile" OnValidSubmit="HandleAddProfile">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Profile Name -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Profile Name</label>
                        <InputText @bind-Value="newProfile.Name" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <!-- Balance -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Balance</label>
                        <InputNumber @bind-Value="newProfile.Balance" class="w-full p-2 rounded bg-gray-700" />
                    </div>

                    <!-- User -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">User</label>
                        <p class="text-gray-300">@newProfile?.User?.UserName</p>
                    </div>

                    <!-- Group -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium mb-2">Group</label>
                        <InputSelect @bind-Value="selectedGroup" class="w-full p-2 rounded bg-gray-700">
                            <option value="">Select Group</option>
                            @foreach (var group in groups)
                            {
                                <option value="@group.GroupID">@group.GroupName</option>
                            }
                        </InputSelect>
                    </div>

                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Profile</button>
                </EditForm>

                @if (isSuccess)
                {
                    <p class="text-green-500 mt-4">Profile added successfully!</p>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <p class="text-red-500 mt-4">@errorMessage</p>
                }
            </div>
        </div>
    </div>
</body>

@code {
    private Profile newProfile = new Profile
    {
            User = new User(),
            Group = new Group()
    };
    private List<User> users = new();
    private List<Group> groups = new();
    private string selectedUser = "";
    private string selectedGroup = "";
    private bool isSuccess = false;
    private string errorMessage = "";
    private bool vantaInitialized;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load users and groups
            // users = await userService.LoadUsersAsync();
            groups = await groupService.LoadGroupsAsync();

            // Optionally set the default or current user
            var currentUser = await EmailToUserMap.GetUserByEmailAsync(Storage);
            if (currentUser != null)
            {
                newProfile.User = currentUser;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users or groups: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !vantaInitialized)
        {
            try
            {
                vantaInitialized = true;

                // Initialize Vanta.js
                await JSRuntime.InvokeVoidAsync("loadVantaScripts");
                await JSRuntime.InvokeVoidAsync("initializeVanta");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Vanta.js: {ex.Message}");
            }
        }
    }

    private async Task HandleAddProfile()
    {
        try
        {
            // Directly associate the new profile with the current user
            if (newProfile.User == null || string.IsNullOrEmpty(newProfile.User.UserName))
            {
                throw new Exception("User not found or not set.");
            }
            if(newProfile.Balance <= 0)
            {
                throw new Exception("Balance cannot be 0 or less than 0.");
            }

            // Associate selected group
            newProfile.Group = groups.FirstOrDefault(g => g.GroupID.ToString() == selectedGroup);

            if (newProfile.Group == null)
            {
                throw new Exception("Group not found or not set.");
            }

            // Save the new profile using the service
            await profileService.SaveProfileAsync(newProfile);

            // Reset form and show success
            isSuccess = true;
            errorMessage = "";
            newProfile = new Profile
                {
                    User = new User(),
                    Group = new Group()
                };
            selectedGroup = "";
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = $"Error adding profile: {ex.Message}";
        }
    }

}
