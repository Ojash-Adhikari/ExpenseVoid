@page "/Login"

@* Directive Statement Imports *@
@using ExpenseVoid.Models
@using ExpenseVoid.Services
@using ExpenseVoid.Interface
@using Microsoft.JSInterop

@* Dependency Injection *@
@inject IUser userService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@* CSS Links *@
<link rel="stylesheet" href="css/Account.css" />

@* JavaScript Links *@
<script src="js/Account.js"></script>

<body class="bg-gray-200">
    <div class="bg-black before:animate-pulse before:bg-gradient-to-b before:from-gray-900 overflow-hidden before:via-[#00FF00] before:to-gray-900 before:absolute">
        <div id="myDIV">
            <div class="w-[100vw] h-[100vh] px-3 sm:px-5 flex items-center justify-center absolute">
                <div class="w-full sm:w-1/2 lg:2/3 px-6 bg-gray-500 bg-opacity-20 bg-clip-padding backdrop-filter backdrop-blur-sm text-white z-50 py-4 rounded-lg">
                    <div class="w-full flex justify-center text-[#00FF00] text-xl mb:2 md:mb-5">
                        Sign In
                    </div>
                    <form @onsubmit="LoginUser">
                        <div class="mb-6">
                            <label for="email" class="block mb-2 text-xs font-medium text-white">Your email</label>
                            <input type="email" id="email" name="email" @bind="email"
                                   class="bg-gray-50 border border-gray-300 text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-1.5 md:p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                   placeholder="name@alchems.net" required />
                        </div>
                        <div class="mb-6">
                            <label for="password" class="block mb-2 text-xs font-medium text-white">Your password</label>
                            <input type="password" id="password" name="password" @bind="password"
                                   class="bg-gray-50 border border-gray-300 text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-1.5 md:p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                   required placeholder="**********" />
                        </div>
                        <div class="flex flex-row justify-between">
                            <div class="text-white text-sm md:text-md mr-4">
                                <a href="#" class="custom-link">Forgot Password</a>
                            </div>
                            <div class="text-white text-sm md:text-md">
                                <a href="/Registration" class="custom-link">Sign Up</a>
                            </div>
                        </div>

                        <button type="submit" class="pushable1">
                            <span class="front1">Login</span>
                        </button>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <p class="text-red-500 mt-2">@errorMessage</p>
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>
</body>
@if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
}

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                await JSRuntime.InvokeVoidAsync("loadAccountJS");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Account.js: {ex.Message}");
            }
        }
    }
    private async Task LoginUser()
    {
        try
        {
            var users = await userService.LoadUsersAsync();

            // Find user by email
            var user = users.FirstOrDefault(u => u.Email == email);

            if (user == null)
            {
                errorMessage = "Invalid email or password.";
                return;
            }
            else
            {
                // Validate password
                if (!userService.ValidatePassword(user.Password, password))
                {
                    errorMessage = "Invalid email or password.";
                    return;
                }
                else
                {
                    Navigation.NavigateTo("/Test");
                    errorMessage = string.Empty;


                    Console.WriteLine("Login successful. Redirecting...");
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again later.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
    }
}
