@* Directive statement Import *@
@using Microsoft.JSInterop
@using ExpenseVoid.Persistence
@using ExpenseVoid.Models
@using ExpenseVoid.Services
@using ExpenseVoid.Interface
@using ExpenseVoid.Helper
@using CommunityToolkit.Maui.Storage
@using OfficeOpenXml;
@using OfficeOpenXml.Style;

@* Dependency Injection *@
@inject IJSRuntime JSRuntime
@inject ITransaction transactionService
@inject IProfile profileService
@inject IDebt debtService
@inject NavigationManager Navigation
@inject EmailToUserMap EmailToUserMap
@inject PreferencesStoreClone Storage
@page "/Dashboard"

@* CSS link *@
<link rel="stylesheet" href="css/sidebar.css" />
<link rel="stylesheet" href="css/Vanta.css" />
<link rel="stylesheet" href="css/DashboardAddon.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>



@* JavaScript Imports *@
<script src="js/sidebar.js"></script>
<script src="js/Vanta.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
<script src="https://cdn.tailwindcss.com"></script>
<script>
    let expensesChart;
    async function initializeCharts() {
        const darkMode = {
            backgroundColor: '#18181b',
            gridColor: '#27272a',
            textColor: '#f0f5f3'
        };

        // Fetch the JSON file
        const transactions = await fetchTransactions();

        // Filter and prepare data for Debit (Expenses) and Credit (Income)
        const filteredTransactions = transactions.filter(t => t.TransactionType.Debit !== null || t.TransactionType.Credit !== null);
        const labels = filteredTransactions.map(t =>
            new Date(t.TransactionDate).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })
        );
        const debitData = filteredTransactions.map(t => t.TransactionType.Debit || 0); 
        const creditData = filteredTransactions.map(t => t.TransactionType.Credit || 0); 

        const totalIncome = transactions
            .filter(t => t.TransactionType.Credit !== null)
            .reduce((sum, t) => sum + (t.TransactionType.Credit || 0), 0);

        const totalExpenses = transactions
            .filter(t => t.TransactionType.Debit !== null)
            .reduce((sum, t) => sum + (t.TransactionType.Debit || 0), 0);

        const totalBalance = totalIncome - totalExpenses;

        // Initialize the chart
        expensesChart = new Chart(document.getElementById('expensesChart'), {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Expenses',
                        data: debitData,
                        borderColor: '#a855f7',
                        tension: 0.4,
                        borderWidth: 2,
                        fill: false
                    },
                    {
                        label: 'Income',
                        data: creditData,
                        borderColor: '#3b82f6',
                        tension: 0.4,
                        borderWidth: 2,
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            color: darkMode.textColor,
                            usePointStyle: true,
                            padding: 20
                        }
                    }
                },
                scales: {
                    y: {
                        display: true,
                        grid: { color: darkMode.gridColor }
                    },
                    x: {
                        display: true,
                        grid: { color: darkMode.gridColor }
                    }
                }
            }
        });
        caloriesChart = new Chart(document.getElementById('caloriesChart'), {
            type: 'doughnut',
            data: {
                labels: ['Income', 'Expenses'],
                datasets: [{
                    data: [totalIncome, totalExpenses],
                    backgroundColor: ['#3b82f6', '#ef4444'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '85%',
                plugins: {
                    legend: {
                        display: true,
                        position: 'bottom',
                        labels: {
                            color: darkMode.textColor,
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                const value = tooltipItem.raw;
                                return `${tooltipItem.label}: $${value.toLocaleString()}`;
                            }
                        }
                    },
                    doughnutLabel: {
                        labels: [
                            {
                                text: `Balance`,
                                font: { size: '16', weight: 'bold' },
                                color: darkMode.textColor
                            },
                            {
                                text: `$${totalBalance.toLocaleString()}`,
                                font: { size: '24', weight: 'bold' },
                                color: darkMode.textColor
                            }
                        ]
                    }
                }
            }
        });
        // Call this after page load
        document.addEventListener("DOMContentLoaded", function () {
            initializeCharts();
        });
    }
    async function fetchTransactions() {
        try {
            const response = await fetch('ExpenseVoid/Transaction/Transaction.json');
            if (!response.ok) {
                throw new Error('Failed to load transactions JSON');
            }
            const transactions = await response.json();
            return transactions;
        } catch (error) {
            console.error(error);
            return [];
        }
    }
    document.addEventListener('DOMContentLoaded', function () {
        initializeCharts();
    });
    window.initializeDateRangePicker = () => {
        const dotNetInstance = DotNet.createJSObjectReference({
            SetDateRange: (start, end) => {
                const startDate = new Date(start);
                const endDate = new Date(end);
                dotNetInstance.invokeMethodAsync("SetDateRange", startDate, endDate);
            }
        });

        flatpickr("#dateRangePicker", {
            mode: "range",
            dateFormat: "Y-m-d",
            onChange: function (selectedDates) {
                if (selectedDates.length === 2) {
                    dotNetInstance.invokeMethodAsync(
                        "SetDateRange",
                        selectedDates[0].toISOString(),
                        selectedDates[1].toISOString()
                    );
                }
            }
        });
    };

</script>



<body class="bg-gray-900 text-white">
    <div id="vanta-bg" class="flex flex-col md:flex-row gap-4 p-4">
        <!-- Sidebar / Navigation Menu -->
        <div>
            <NavMenu />
        </div>

        <div class="max-w-6xl grid p-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div>
                <div class="card p-6 mb-[20px]">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-White-400 text-sm font-medium mr-[17px]">Monthly Transactions</h2>
                        <div class="flex items-center gap-2">
                            <input id="dateRangePicker" class="bg-gray-700 px-3 py-1 rounded text-White-400 text-xs w-16" />
                            <button class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 text-sm" @onclick="FilterData">
                                Apply
                            </button>
                        </div>
                    </div>
                    <div class="mb-6">
                        <h3 class="text-4xl font-semibold">$@AvgTransactionBalace<span class="text-sm text-white-400 ml-1">avg.</span></h3>
                    </div>
                    <div style="height: 120px;">
                        <canvas id="expensesChart"></canvas>
                    </div>
                </div>

                <div class="card p-2">
                    <div class="card p-6 border-2 border-indigo-500">
                        <h2 class="text-white-400 mb-[20px] text-[#50d71e]">Top 5 Transactions <span class="text-green-500 text-xl">↗ </span></h2>
                        @if (currentUserTransactions != null && currentUserTransactions.Any())
                        {
                            foreach (var transaction in currentUserTransactions)
                            {
                                <h2 class="text-White-400 text-sm font-medium mb-[10px]">
                                    @if (transaction.TransactionType?.Debit > 0)
                                    {
                                        <span style="color:#913636">Debit: @($"{transaction.TransactionType?.Debit:C}")</span>
                                    }
                                    @if (transaction.TransactionType?.Credit > 0)
                                    {
                                        <span style="color: #117318">Credit: @($"{transaction.TransactionType?.Credit:C}")</span>
                                    }
                                    <span>, @($"{transaction.TransactionDate:MMM dd, yyyy}")</span>
                                </h2>
                            }
                        }
                        else
                        {
                            <h2 class="text-White-400 text-sm font-medium mb-[17px]">No transactions available.</h2>
                        }
                    </div>
                </div>


            </div>
            
            <div class="card p-6">
                <div class="flex justify-between items-center mb-4">
                    <div>
                        <h2 class="text-sm font-medium mb-1">
                            <i class="fas fa-fire-flame-curved text-orange-500 mr-2"></i>Balance
                        </h2>
                        <div class="text-2xl font-semibold calories-value">@currentUser?.Balance</div>

                    </div>
                </div>
                <div class="space-y-4 mb-6">
                    <div>
                        <h3 class="text-sm font-medium mb-1">
                            <i class="fas fa-shoe-prints text-blue-500 mr-2"></i>Total Profile
                        </h3>
                        <div class="text-2xl font-semibold">@profileCount</div>
                    </div>
                    <div>
                        <h3 class="text-sm font-medium mb-1">
                            <i class="fas fa-dumbbell text-purple-500 mr-2"></i>Total Transactions
                        </h3>
                        <div class="text-2xl font-semibold">@transactionCount</div>
                    </div>
                </div>
                <div class="flex justify-center" style="height: 160px;">
                    <canvas id="caloriesChart"></canvas>
                </div>
            </div>

            <div class="card p-6">
                <div class="card p-6 mb-[15px] border-2 border-indigo-500">
                    <h2 class="text-white-400 text-sm mb-2">Total Income</h2>
                    <div class="text-3xl font-semibold">@TotalIncome</div>
                    <div class="text-green-500 text-sm">↗ 3.3%</div>
                </div>

                <div class="card p-6 mb-[15px] border-2 border-indigo-500">
                    <h2 class="text-white-400 text-sm mb-2">Total Expenses</h2>
                    <div class="text-3xl font-semibold">@TotalExpenses</div>
                    <div class="text-yellow-500 text-sm">→ 0.0%</div>
                </div>

                <div class="card p-6 mb-[15px] border-2 border-indigo-500">
                    <h2 class="text-white-400 text-sm mb-2">Total Saving</h2>
                    <div class="text-3xl font-semibold">@Savings</div>
                    <div class="text-red-500 text-sm">↘ 3.3%</div>
                </div>
                <div class="card p-6 border-2 border-indigo-500">
                    <h2 class="text-white-400 text-sm mb-2">Total Debt</h2>
                    <div class="text-3xl font-semibold">@TotalDebts</div>
                    <div class="text-yellow-500 text-sm">↘ 3.3%</div>
                </div>
            </div>



            <div class="card p-2">
                <div class="card p-6 border-2 border-indigo-500">
                    <h2 class="text-white-400 mb-[17px] text-[#50d71e]">Top 5 Lowest Transactions</h2>
                    @if (currentUserTransactionsAscending != null && currentUserTransactionsAscending.Any())
                    {
                        foreach (var transaction in currentUserTransactionsAscending)
                        {
                            <h2 class="text-White-400 text-sm font-medium mb-[10px]">
                                @if (transaction.TransactionType?.Debit > 0)
                                {
                                    <span style="color:#913636">Debit: @($"{transaction.TransactionType?.Debit:C}")</span>
                                }
                                @if (transaction.TransactionType?.Credit > 0)
                                {
                                    <span style="color: #117318">Credit: @($"{transaction.TransactionType?.Credit:C}")</span>
                                }
                                <span>, @($"{transaction.TransactionDate:MMM dd, yyyy}")</span>
                            </h2>
                        }
                    }
                    else
                    {
                        <h2 class="text-White-400 text-sm font-medium mb-[17px]">No transactions available.</h2>
                    }
                </div>
            </div>
            <div class="card p-4 col-span-2">
                <div class="button-container">
                    <button type="submit" class="pushable1" @onclick="NavigateToTransactions">
                        <span class="front1">Add Transaction</span>
                    </button>
                    <button type="button" class="pushable1"  @onclick="SaveToExcel">
                        <span class="front1">Download Transactions</span>
                    </button>
                </div>
                <div class="button-container">
                    <button type="submit" class="pushable1" @onclick="NavigateToDebts">
                        <span class="front1">Add Debt</span>
                    </button>
                    <button type="button" class="pushable1" @onclick="SaveToExcelDebt">
                        <span class="front1">Download Debt</span>
                    </button>
                </div>
            </div>


            
        </div>
        <div class="card w-[400px] h-[937px] mt-[14px] p-6">
    <!-- Pending Debts Section -->
        <div class="card p-4 border-2 border-indigo-500 mb-[20px]">
            <h2 class="text-white-400 mb-[17px] text-[#50d71e]">Pending Debts</h2>
            @if (debtList.Any(debt => debt.IsCleared == false))
            {
                <div class="scrollable-container">
                    @foreach (var debt in debtList.Where(debt => debt.IsCleared == false))
                    {
                        <div class="p-2 mb-4 bg-gray-800 rounded-lg shadow-lg">
                            <h3 class="text-white-400 text-sm font-medium">Source: @debt.Source?.Name</h3>
                            <p class="text-gray-300 text-sm">Amount: @debt.Amount?.ToString("C")</p>
                            <p class="text-gray-300 text-sm">Borrowed On: @debt.BorrowedDate?.ToString("MMMM dd, yyyy")</p>
                            <p class="text-gray-300 text-sm">Due Date: @debt.DueDate?.ToString("MMMM dd, yyyy")</p>
                            <p class="text-gray-400 text-xs italic">@debt.Notes</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <h3 class="text-gray-400 text-sm font-medium">No pending Debts, Good Job!</h3>
            }
        </div>

    <!-- User Profiles Section -->
    <div class="card p-4 border-2 border-indigo-500 mb-[20px]">
        <h2 class="text-white-400 mb-[17px] text-[#50d71e]">User Profiles</h2>
        @if (userProfiles.Any())
        {
            @foreach (var profile in userProfiles)
            {
                <div class="p-2 mb-4 bg-gray-800 rounded-lg shadow-lg">
                    <h2 class="text-white-400 text-sm font-medium mb-[17px]">@profile.Name :: @profile.Group.GroupName</h2>
                    <h2 class="text-white-400 text-sm font-medium mb-[17px]">@profile.Balance</h2>
                </div>
                
            }
        }
        else
        {
            <h2 class="text-gray-400 text-sm font-medium">No profiles available.</h2>
        }
    </div>
</div>



    </div>
</body>

@code {
    public string errormessage;
    private bool vantaInitialized;
    private User? currentUser;
    private bool isAvailable;
    private List<Transaction> currentUserTransactions = new();
    private List<Transaction> currentUserTransactionsAscending = new();
    private List<Profile> userProfiles = new();
    private List<Debt> debtList = new();
    private int transactionCount;
    private int profileCount;
    private double TotalIncome = 0;
    private double TotalExpenses = 0;
    private double Savings = 0;
    private double? TotalDebts = 0;
    private double TotalTransactionBalance = 0;
    private double AvgTransactionBalace = 0;
    private DateTime startDate = DateTime.Now.AddMonths(-1); // Default start date: 1 month ago
    private DateTime endDate = DateTime.Now;
    private DotNetObjectReference<Dashboard>? dotNetInstance;
    [JSInvokable]
    public void SetDateRange(DateTime start, DateTime end)
    {
        startDate = start;
        endDate = end;
        StateHasChanged(); // Update the UI
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await EmailToUserMap.GetUserByEmailAsync(Storage);
        dotNetInstance = DotNetObjectReference.Create(this);
        if (currentUser != null)
        {
            Console.WriteLine($"Welcome, {currentUser.FirstName}!");


            // Fetch transactions for the current user
            var allTransactions = await transactionService.GetTransactionsByUserIdAsync(currentUser.UserID);
            var allProfiles = await profileService.GetProfileByUserIdAsync(currentUser.UserID);
            var allDebts = await debtService.GetDebtByUserIdAsync(currentUser.UserID);

            userProfiles = allProfiles ?? new List<Profile>();
            debtList = allDebts ?? new List<Debt>();

            // Sort and limit to top 5 transactions
            currentUserTransactions = allTransactions
              .OrderByDescending(t => (t.TransactionType?.Debit ?? 0) + (t.TransactionType?.Credit ?? 0))
              .Take(5)
              .ToList();

            currentUserTransactionsAscending = allTransactions
              .OrderBy(t => (t.TransactionType?.Debit ?? 0) + (t.TransactionType?.Credit ?? 0))
              .Take(5)
              .ToList();

            transactionCount = allTransactions?.Count() ?? 0;
            profileCount = allProfiles?.Count() ?? 0;

            TotalIncome = allTransactions.Sum(t => t.TransactionType?.Credit ?? 0);
            TotalExpenses = allTransactions.Sum(t => t.TransactionType?.Debit ?? 0);
            Savings = TotalIncome - TotalExpenses;
            TotalTransactionBalance = TotalIncome + TotalExpenses;
            AvgTransactionBalace = Math.Round(TotalTransactionBalance / 12, 2);
            TotalDebts = allDebts.Sum(d => d.Amount);

        }
        else
        {
            Console.WriteLine("No user found or email is not set in storage.");
        }
    }
    public void Dispose()
    {
        dotNetInstance?.Dispose();
    }
    private async Task FilterData()
    {
        var allTransactions = await transactionService.GetTransactionsByUserIdAsync(currentUser.UserID);
        var allDebts = await debtService.GetDebtByUserIdAsync(currentUser.UserID);
        // Filter transactions by date range
        var filteredTransactions = allTransactions
            .Where(t => t.TransactionDate >= startDate && t.TransactionDate <= endDate)
            .ToList();

        // Filter debts by date range
        var filteredDebts = allDebts
            .Where(d => d.BorrowedDate >= startDate && d.BorrowedDate <= endDate)
            .ToList();

        // Recalculate totals
        TotalIncome = filteredTransactions.Sum(t => t.TransactionType?.Credit ?? 0);
        TotalExpenses = filteredTransactions.Sum(t => t.TransactionType?.Debit ?? 0);
        Savings = TotalIncome - TotalExpenses;
        TotalTransactionBalance = TotalIncome + TotalExpenses;

        // Calculate the average transaction balance for the selected date range
        var months = ((endDate.Year - startDate.Year) * 12) + endDate.Month - startDate.Month + 1;
        AvgTransactionBalace = months > 0 ? Math.Round(TotalTransactionBalance / months, 2) : 0;

        TotalDebts = filteredDebts.Sum(d => d.Amount ?? 0);

        StateHasChanged();
    }
    private void NavigateToTransactions()
    {
        Navigation.NavigateTo("/Transactions");
    }
    private void NavigateToDebts()
    {
        Navigation.NavigateTo("/Debts");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !vantaInitialized)
        {
            try
            {
                vantaInitialized = true;



                // Ensure scripts are loaded
                await JSRuntime.InvokeVoidAsync("loadVantaScripts");
                
                // Initialize Vanta.js
                await JSRuntime.InvokeVoidAsync("initializeVanta");
                await JSRuntime.InvokeVoidAsync("initializeCharts");
                await JSRuntime.InvokeVoidAsync("initializeDateRangePicker");

                // await JSRuntime.InvokeVoidAsync("loadSidebarJS");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing Vanta.js: {ex.Message}");
            }
        }
    }

    private async Task SaveToExcel()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set EPPlus license context

            var transactionService = new TransactionService();

            // Get the Excel file path
            var fileName = "Transactions.xlsx";
            var filePath = Path.Combine(FileSystem.AppDataDirectory, fileName);

            // Ensure the directory exists
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            // Save transactions to the Excel file
            await transactionService.SaveTransactionsToExcelAsync(filePath);

            // Read the file into a MemoryStream
            var fileBytes = File.ReadAllBytes(filePath);
            using var stream = new MemoryStream(fileBytes);

            // Save the file using FileSaver
            var result = await FileSaver.Default.SaveAsync(fileName, stream);

            if (result.IsSuccessful)
            {
                Console.WriteLine($"File saved to {result.FilePath}");
            }
            else
            {
                Console.WriteLine("File save canceled or failed.");
            }
        }
        catch (Exception ex)
        {
            errormessage = $"Error saving to Excel: {ex.Message}";
            Console.WriteLine($"Error saving to Excel: {ex.Message}");
        }
    }
    private async Task SaveToExcelDebt()
    {
        try
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set EPPlus license context

            var debtService = new DebtService();

            // Get the Excel file path
            var fileName = "Debts.xlsx";
            var filePath = Path.Combine(FileSystem.AppDataDirectory, fileName);

            // Ensure the directory exists
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            // Save transactions to the Excel file
            await debtService.SaveDebtToExcelAsync(filePath, currentUser.UserID);

            // Read the file into a MemoryStream
            var fileBytes = File.ReadAllBytes(filePath);
            using var stream = new MemoryStream(fileBytes);

            // Save the file using FileSaver
            var result = await FileSaver.Default.SaveAsync(fileName, stream);

            if (result.IsSuccessful)
            {
                Console.WriteLine($"File saved to {result.FilePath}");
            }
            else
            {
                Console.WriteLine("File save canceled or failed.");
            }
        }
        catch (Exception ex)
        {
            errormessage = $"Error saving to Excel: {ex.Message}";
            Console.WriteLine($"Error saving to Excel: {ex.Message}");
        }
    }
}
